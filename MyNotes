N- Chapter1 , page 15 
Table 1-4 Symbol Commands :
( )       Runs the enclosed command in a sub-shell
  As an example :
  $ pwd 
  $ /home/user1
  $ ( cd Documents ; pwd )
  $ /home/user1/Documents
  $ pwd
  $ /home/user1

E- Chapter1 , page 15 
Command-Line Arguments :
    "The positional parameters, $0, $2, and so on in a function are for the function’s use" 
The correct text should be 
    "The positional parameters, $1, $2, and so on in a function are for the function’s use"

E- Chapter1 , page 16-17
Listing 1-2 Example of using the shift command
The script (it is a kind of template ,but still it should be clear) as it is written in the book,
does not provide a mechanism to exit the while-loop. And the point at which the addition +1 happens 
isnot good. Here is how it should be :
  #!/usr/bin/sh
  # Mastering Unix Shell scripting 2008, Chapter1 page 16
  # Listing 1-2 Example of using the shift command
  TOTAL=0		# Initialize the TOTAL counter to zero
  # Start a while loop
  while true
  do
  	TOKEN=$1
  	[ -z $TOKEN ] && break;  #if no command line argument was given break out of while-loop
  	TOTAL=`expr $TOTAL + 1`  #or TOTAL=$(($TOTAL + 1))
  	echo "Argument processed : $TOKEN " #
  	shift		# Grab the next token, i.e. $2 becomes $1
  done
  echo "Total number of tokens processed: $TOTAL"

N- Chapter1 Setting traps , page 25
One full example can be:
  #!/bin/bash
  echo "we create a temporary file in /tmp"
  touch /tmp/trap_file.txt
  trap 'echo -e "\nPremature termination.Cleaning temp files before exiting.\n"; rm /tmp/temp_file.txt; exit' 1 2 3 15
  read -p "give some words as input to the file /tmp/trap_file.txt: "
  echo $REPLY > /tmp/trap_file.txt
  echo "Here are the contents of the file , before we destroy it:"
  cat /tmp/trap_file.txt
  rm /tmp/trap_file.txt

E- Chapter1 Output Control , page 32 Silent running
The book has an example of :
  /PATH/script_name 2>&1 > /dev/null
to redirect the error stream file descriptor 2 at the same stream as the stdout file descriptor 1
and then supposedly both of them will be redirected in the /dev/null , so no output to clutter the console.
But at least in bash , the correct is:
  /PATH/script_name  1> /dev/null 2>&1
so first the redirection of fd 1 must go to /dev/null (or any other file, to really check it)
and then the fd 2 follows where ever &1 is redirected.  
This can easily be tested with something that produces both an error message and a normal output message.
   ls nonexistentfile existingfile 1> ls_results 2>&1
where existing file must exist. This way the contents of ls_results file will have both the error (for nonexistentfile)
and the normal output (for existingfile). I tested it for both bash and ksh.

E- Chapter1 Using getops to parse command-line arguments ,page 34 
Here is a more complete example with corrections
  #!/bin/bash
  SECS=0		# Initialize all to zero
  MINUTES=0
  HOURS=0 
  TOTAL_SECONDS=0  #This is missing from the book, but it is crucial for the final calculation
  PROCESS=	# Initialize to null , empty string
  usage () { 
  	echo "$(basename $0) -s S -m M -h H ";echo "Where S is integer number for seconds,M for minutes,H for hours";
  }   #The book does not provide some implementation of the function usage
  while getopts :s:m:h:d:p: TIMEOPT 2>/dev/null
  do
  	case $TIMEOPT in
		  s) SECS=$OPTARG ;;
		  m) (( MINUTES = $OPTARG * 60 )) ;;
		  h) (( HOURS = $OPTARG * 3600 ))	;;
		  d) (( DAYS = $OPTARG * 86400 )) ;;
		  p) PROCESS=$OPTARG ;;
		  \?) usage ; exit 1 ;;
	  esac
  done
  (( TOTAL_SECONDS = $SECS + $MINUTES + $HOURS + $DAYS )) #Here the book has wrong name SECONDS ,and also forgets the $
  echo "We will monitor the application $PROCESS for $TOTAL_SECONDS seconds"


Ε- Chapter1 Making a Co-Process with Background Function ,page 35
The book has several mistakes. Here is a working example,with more comments
#!/usr/bin/ksh
function trap_exit
{
  BREAK_OUT='Y'		# Tell the co-process to break out of the loop
  echo "I must have trapped a SIG. I have to inform the co-process"
  print -p $BREAK_OUT	# Use "print -p" to talk to the co-process
}
function proc_watch 	# This function is started as a co-process!!!
{
  while :	# Loop forever
  do
	echo "We started the co-process function $0 " 1>&2 ##--Do not know how to get PID of proc_watch in here!
	read BREAK_OUT # Do NOT need a "-p" to read!  , also the book has it wrong as: read $BREAK_OUT
	echo -e "we received $BREAK_OUT ,lets check if it is Y\n" 1>&2
	if [[ $BREAK_OUT = 'Y' ]];then
	  return 0
	fi
  done
}
##### Start of Main ########
echo "Starting main with PID of $$ "    #-- Simple debugging message --
trap 'trap_exit; exit 2' 1 2 3 15	### Set a Trap ,in case user types Ctr+C or main sents SIG:HUP,INT,QUIT,TERM###
TOTAL_SECONDS=10
BREAK_OUT='N'
proc_watch |& 	# Start proc_watch as a co-process!!
PW_PID=$! 	#-- Process ID of the last background job ProcWatch ,the book has it wrong as PW_PID=$1
echo " The background co-process has PID = $PW_PID "  #-- Simple debugging message --
until (( TOTAL_SECONDS == 0 ))
do
  (( TOTAL_SECONDS = $TOTAL_SECONDS - 1 )) #--Here the book has again a mistake forgetting the $
  echo " $TOTAL_SECONDS  [press Ctrl+C to stop co-process earlier]"
  sleep 1
done
BREAK_OUT='Y'
print -p $BREAK_OUT	# Use "print -p" to communicate with the co-process variable,for korn shell
echo "Going to kill the co-process $PW_PID "
kill $PW_PID		# Kill the background co-process,so that it will not stay orphan
exit 0
###### The book is also wrong when it says :
 Try setting up the scenario described previously with a background function that
 has an infinite loop. Then press the Ctrl+C key sequence to kill the main script, and
 do a ps -ef | more . You will see that the background loop is still executing! Get the
 PID, and do a kill -9 on that PID to kill it.
As anyone can test using my above script, when he let the 10secs pass normaly , the value of $? is 0 
but when he types Ctrl+C , the value of $? is 2 , from the exit command inside the trap line of main.
